
# Generated by Django 4.2.14 on 2024-08-22 14:12


import base_edcp.validators
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('options', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date de Création')),
                ('username', models.CharField(blank=True, max_length=100, verbose_name="Nom d'utilisateur")),
                ('avatar', models.ImageField(blank=True, help_text='Photo de profil (facultative)', max_length=255, null=True, upload_to='avatars', verbose_name='Avatar')),
                ('nom', models.CharField(max_length=225, validators=[base_edcp.validators.validate_charfield, base_edcp.validators.validate_no_special_chars], verbose_name='Nom')),
                ('prenoms', models.CharField(max_length=255, validators=[base_edcp.validators.validate_charfield, base_edcp.validators.validate_no_special_chars], verbose_name='Prénoms')),
                ('organisation', models.CharField(blank=True, max_length=255, null=True, validators=[base_edcp.validators.validate_charfield, base_edcp.validators.validate_no_special_chars], verbose_name='Organisation')),
                ('telephone', models.CharField(blank=True, max_length=100, null=True, validators=[base_edcp.validators.validate_charfield, base_edcp.validators.validate_no_special_chars], verbose_name='Téléphone')),
                ('fonction', models.CharField(blank=True, max_length=255, null=True, validators=[base_edcp.validators.validate_charfield, base_edcp.validators.validate_no_special_chars], verbose_name='Fonction')),
                ('is_active', models.BooleanField(default=True, verbose_name='Est Actif')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Est Membre du Personnel')),
                ('email_verified', models.BooleanField(default=False, verbose_name='Email Vérifié')),
                ('must_reset', models.BooleanField(default=False, verbose_name='Doit Reinitialiser son Mot de Passe')),
                ('is_dpo', models.BooleanField(default=False, verbose_name='Est un Correspondant')),
                ('consentement', models.BooleanField(default=False, help_text="Veuillez cocher cette case pour donner votre consentement : \n        les données soumises via ce formulaire seront utilisées pour la création \n        et pour l'accomplissement de vos formalités sur la plateforme e-DCP. \n        Vos données ne seront traitées que par les agents habilités de l'Autorité de Protection.\n        Vous pouvez à tous moments exercer vos droits exercer à l'adresse ..... ", verbose_name='Je donne mon consentement')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=100, verbose_name='Rôle')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date et heure de création')),
                ('is_read', models.BooleanField(default=False, verbose_name='Est lu')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
        ),
        migrations.CreateModel(
            name='JournalTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateField()),
                ('transaction', models.CharField(max_length=100)),
                ('cible', models.CharField(max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Journal Transaction',
                'verbose_name_plural': 'Journals Transactions',
            },
        ),
        migrations.CreateModel(
            name='Enregistrement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de Création')),
                ('raisonsociale', models.CharField(help_text="Nom de la personne physique ou de l'organisation à enregistrer", max_length=100, validators=[base_edcp.validators.validate_charfield, base_edcp.validators.validate_no_special_chars], verbose_name='Nom ou Raison Sociale')),
                ('idu', models.CharField(blank=True, max_length=100, null=True, verbose_name="Numéro d'IDentifiant Unique")),
                ('representant', models.CharField(blank=True, max_length=100, verbose_name='Nom du représentant légal')),
                ('rccm', models.CharField(blank=True, max_length=100, null=True, validators=[base_edcp.validators.validate_charfield, base_edcp.validators.validate_no_special_chars, base_edcp.validators.validate_rccm_idu], verbose_name='Numéro RCCM')),
                ('telephone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Téléphone')),
                ('email_contact', models.EmailField(max_length=100, null=True, verbose_name='Email de Contact')),
                ('site_web', models.URLField(blank=True, max_length=100, null=True, verbose_name='Site Web')),
                ('ville', models.CharField(max_length=100, null=True, validators=[base_edcp.validators.validate_charfield, base_edcp.validators.validate_no_special_chars], verbose_name='Ville')),
                ('adresse_geo', models.CharField(blank=True, max_length=100, null=True, validators=[base_edcp.validators.validate_charfield, base_edcp.validators.validate_no_special_chars], verbose_name='Adresse Géographique')),
                ('adresse_bp', models.CharField(blank=True, max_length=100, null=True, verbose_name='Boîte Postale')),
                ('gmaps_link', models.URLField(blank=True, max_length=255, null=True, verbose_name='Lien Google Maps')),
                ('effectif', models.IntegerField(blank=True, null=True, verbose_name='Effectif')),
                ('presentation', models.TextField(blank=True, max_length=255, null=True, verbose_name="Présentation de l'activité")),
                ('num_piece', models.CharField(blank=True, max_length=100, null=True, verbose_name='Numéro de la pièce')),
                ('has_dpo', models.BooleanField(default=False, verbose_name='A désigné un Correspondant')),
                ('file_piece', models.FileField(blank=True, help_text='Formats acceptés images et documents PDF : jpg, jpeg, png, pdf. Taille limite: 8 Mb.', null=True, upload_to='docs/enregistrement', validators=[base_edcp.validators.validate_files, django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])], verbose_name="Pièce d'identité")),
                ('file_rccm', models.FileField(blank=True, help_text='Formats acceptés images et documents PDF : jpg, jpeg, png, pdf. Taille limite: 8 Mb.', null=True, upload_to='docs/enregistrement', validators=[base_edcp.validators.validate_files, django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])], verbose_name='Copie du Registre du Commerce')),
                ('file_mandat', models.FileField(blank=True, help_text="Si vous n'êtes pas le représentant légal, Joindre un mandat signé par le représentatnt légal de l'organisation", null=True, upload_to='docs/enregistrement', validators=[base_edcp.validators.validate_files, django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])], verbose_name='Mandat de représentation')),
                ('pays', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='options.pays', verbose_name='Pays')),
                ('secteur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='options.secteur', verbose_name="Secteur d'Activité")),
                ('type_piece', models.ForeignKey(blank=True, default='', null=True, on_delete=django.db.models.deletion.CASCADE, to='options.typepiece', verbose_name="Type de pièce d'identité")),
                ('typeclient', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='options.typeclient', verbose_name='Type de Client')),

                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Enregistrement',
                'verbose_name_plural': 'Enregistrements',
            },
        ),
    ]
