# Nom du flux de travail
name: Les Vérifications et Déploiement

# Événement déclencheur
on:
  push:
    branches:
      - main # Seulement la branche principale (main)

# Définition des tâches à exécuter
jobs:
  test-lint: # Nom du job
    name: Test et Linting # Nom affiché dans l'interface utilisateur
    runs-on: ubuntu-20.04  # Environnement d'exécution

    # Étapes à exécuter dans le job
    steps:
      - name: Se connecter à Docker Hub # Étape de connexion à Docker Hub
        uses: docker/login-action@v3 # Utilisation de l'action docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}  # Nom d'utilisateur Docker Hub
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Mot de passe Docker Hub

      - name: Téléchargement du code source # Étape de récupération du code source
        uses: actions/checkout@v2 # Utilisation de l'action actions/checkout@v2

       #- name: Exécuter les tests # Étape d'exécution des tests
       # run: docker-compose run --rm app_edcp sh -c "python manage.py test" # Exécution des tests via docker-compose

      - name: Vérification du linting # Étape de vérification du linting
        run: docker-compose run --rm app_edcp sh -c "flake8" # Vérification du linting avec flake8

  deploy: # Nom du job de déploiement
    name: Déploiement
    runs-on: ubuntu-20.04
    needs: test-lint # Le job deploy ne s'exécute que si test-lint réussit
    steps:
      - name: Se connecter à Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Téléchargement du code source
        uses: actions/checkout@v2

      - name: Construire l'image Docker
        run: docker-compose -f docker-compose.prod.yml build app_edcp

      - name: Pousser l'image sur Docker Hub
        run: docker-compose -f docker-compose.prod.yml push app_edcp

      - name: Installer SSHpass pour utiliser le mot de passe SSH
        run: sudo apt-get install -y sshpass

      - name: Déployer sur le serveur de production
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          docker-compose -f /chemin/vers/votre/docker-compose.prod.yml pull app_edcp
          docker-compose -f /chemin/vers/votre/docker-compose.prod.yml up -d --no-deps app_edcp
          EOF